
#in  exam you use vi editor , it gives only it, not vscode , so get use of it and its short cuts
---
- command ['sh','-c'] # we running shell comand and sh= shell, -c = command
- args:[] # we write commands in shell to execute as per requirement
- # we can seperate both command , arg as shown above . or else we can comabine both "command ['sh','-c',arguments]"
- 

- kubectl exec -it pod_name --printenv # prints all envrionement values

- kubectl create deploy mydb --image redis --port 80
- kubectl expose deploy mydb --name mydb --port 80

- k create cm app-cm --from-literal=    # by litral
- k create cm app-cm --from-file=app/config   # by file
- 




---

- kubectl run nginx --image=nginx --dry-run=client  
- kubectl run nginx --image=nginx --dry-run=client -o yaml     # gives yaml foramt
- kubectl run nginx --image=nginx --dry-run=client -o yaml > pod.yaml   #  Generate spec for running pod nginx and write it into a file called pod.yaml
- kubectl run nginx --image=nginx --dry-run=client -o json > pod.yaml  # in json format 

- kubectl get pods --show-labels  # Show labels for all pods (or any other Kubernetes object that supports labelling)
- kubectl get pods pod_name  --show-labels 


- kubectl get pods
- kubectl get pods -o wide  # give all details like in whihc  node it is running and ip of its 
- kubectl get nodes
- kubectl get nodes -o wide

- kubectl set image deploy/nginx-deploy nginx=nginx:1.9.1  # by this we can update image in deployment 
- kubectl set image deployment/frontend www=image:v2               # Rolling update "www" containers of"frontend" deployment, updating the image
- kubectl rollout history deployment/name             # Check the history of deployments including the revision
- kubectl rollout undo deployment/frontend                         # Rollback to the previous deployment
- kubectl rollout undo deployment/frontend --to-revision=2         # Rollback to a specific revision
- kubectl rollout status -w deployment/frontend                    # Watch rolling update status of "frontend" deployment until completion
- kubectl rollout restart deployment/frontend                      # Rolling restart of the "frontend" deployment
- kubectl desccribe rollout deployment/name # gives  info of rooll out


- kubectl get pods --show-labels

- kubectl get pods --selector  tier=frontend   # it means we get only pods whihc has front end label 
- 
- kubectl node node_name gpu=true:NoSchedule   # to node a tainet 
- kubectl node node_name gpu=true:NoSchedule- # to untaint 
- kubectl autoscale deploy deployment_name --cpu-percent=50  --min=1 --max=10  # so that it understand if cpu % is more than 50 % it increse pods , else it maintan one pod
- kubectl get hpa --watch # we can watach hpa process

- kubectl top node # it lists top rsource modes

- k describe csr adam # it shows certificate signingg request  raised by  adam/user to admin
- k certificate approve adam/user # it aprove csr by admin
- k get csr  # it shows status of csr 
- k get csr adam -o yaml > issuecert.yaml # 
- 

- by default all certificates ae placed in cluster in this path /etc/kubernetes/pki
- kubectl auth can-i get pod #  it tells  am i access or not
- kubectl auth whoami #  which user you are 
- kubectl auth can-i get pod as --adam  #  it tells  user has what access or not to the pods access
- k get roles -A # to see all roles in namespace
- k get roles -A --no-headers | wc -l  # it removes headers and give total roles 
- 

- kubectl api-resources --namespaced=true  # it gives all resources that are avilable atthe name space leverl
- kubectl api-resources --namespaced=false  # gives cluster level resources like storage clasess, csi node, csidriver, cluster role, ingress , CRD
- kubectl get clusterrole 


- k get sa -A | grep default 
- k get sa default -o yaml
- k create sa sa_name  # to crate service account 
- k describe sa sa_name
- 

